(define (cube x) (* x x x))
(cube 2)

(define (sum-integers-iter a b c) (if (> a b) c (sum-integers-iter (
      + a 1) b (+ c a))))

(sum-integers-iter 1 1000)

(define (sum-integers a b) (if (> a b) 0 (+ a (sum-integers (
      + a 1) b))))

(sum-integers 1 100)



(define (sum term a next b)
      (if (> a b) 0 (+ (term a) (sum term (next a) next b))))

(sum cube 1 (lambda (n) (+ n 1)) 10)

(define (identity x) x)

(define (inc n) (+ n 1))

(sum identity 1 inc 100)

(define (pi-sum a b) (define (pi-term x) (/ 1.0 (* x (+ x 2))))
      (define (pi-next x) (+ x 4))
      (sum pi-term a pi-next b)
      )

(* 8 (pi-sum 1 100))
