(define (list-ref items n)
		(if (= n 0)
			(car items)
			(list-ref (cdr items) (- n 1))))
(define squares '(1 4 9 16 25))
(list-ref squares 3)

(define (length items)
		(if (null? items)
			0
			(+ 1 (length (cdr items)))))

(define odds '(1 3 5 7))
(length odds)

(define (append list1 list2)
	(if (null? list1)
		list2
		(cons (car list1) (append (cdr list1) list2))))

(append squares odds)
(append odds squares)

(define (map proc items)
	(if (null? items)
		nil
		(cons (proc (car items))
			(map proc (cdr items)))))

(map (lambda (x) (* x x)) '(1 2 3 4))
(define (count-leaves x)
	(cond ((null? x) 0)
		  ((not (pair? x)) 1)
		  (else (+ (count-leaves (car x))
				   (count-leaves (cdr x))))))
(define x (cons '(1 2) '(3 4)))
(length x)
(count-leaves x)
(length '(x x))
(count-leaves (cons x (cons x nil)))
