`default_nettype none
module vma(
	input			i_clk,
	input			i_rst,
	input	[31:0]	i_v_addr,
	input			i_v_stb,
	input	[3:0]	i_v_we,
	output			o_v_ack,
	output	[31:0]	o_p_addr,
	output			o_p_stb,
	output	[3:0]	o_p_we,
	input			i_p_ack,
	input	[31:0]	i_p_dat_r,
	input	[31:0]	i_satp,
	input			i_smode,
	input			i_sfence_vma,
	output			o_exception
);
assign o_exception =0;// exception;
//satp supervisor address translation and protection register
wire [21:0] satp_ppn  = i_satp[21:0];
wire [8:0]	satp_asid = i_satp[30:22];
wire 		satp_mode = i_satp[31] & i_smode;

//translation process
assign o_p_addr[11:0]  = (walk1)? {i_v_addr[31:22],2'd0} : walk2? {i_v_addr[21:12],2'd0} : i_v_addr[11:0];
assign o_p_addr[31:12] = ~satp_mode? i_v_addr[31:12] : (walk1)? satp_ppn[19:0] : walk2? pte[29:10]: ppn;
wire exception = (walk2_stb & ~pte[0]) | (walk3_stb & no_match);
assign o_p_stb = satp_mode? (match? (i_v_stb | walk3_stb) : (walk1_stb | walk2_stb)) : i_v_stb;
assign o_v_ack = satp_mode? (match? i_p_ack:0) : i_p_ack;
wire [19:0] ppn =  ((match_0)? tlb_0[29:10] : 20'd0)|
				   ((match_1)? tlb_1[29:10] : 20'd0)|
				   ((match_2)? tlb_2[29:10] : 20'd0);
assign o_p_we = satp_mode? (match? i_v_we : 0):i_v_we;
// math with tlb
wire match_0 = satp_mode & (tlb_vpn_0 == i_v_addr[31:12]) & tlb_0[0];
wire match_1 = satp_mode & (tlb_vpn_1 == i_v_addr[31:12]) & tlb_1[0];
wire match_2 = satp_mode & (tlb_vpn_2 == i_v_addr[31:12]) & tlb_2[0];
wire no_match = ~match;
wire match = (match_0 | match_1 | match_2);

// tlb
reg [19:0] tlb_vpn_0;
always @(posedge i_clk)
	if (i_rst|i_sfence_vma) tlb_vpn_0 <= 20'h0;
	else if (walk2 & i_p_ack) tlb_vpn_0 <= i_v_addr[31:12];
	else if (match_1 & i_v_stb) tlb_vpn_0 <= tlb_vpn_1;
	else if (match_2 & i_v_stb) tlb_vpn_0 <= tlb_vpn_2;

reg [31:0] tlb_0;
always @(posedge i_clk)
	if (i_rst|i_sfence_vma) tlb_0 <= {22'h0,10'd0};
	else if (walk2 & i_p_ack) tlb_0 <= i_p_dat_r;
	else if (match_1 & i_v_stb) tlb_0 <= tlb_1;
	else if (match_2 & i_v_stb) tlb_0 <= tlb_2;
reg [19:0] tlb_vpn_1;
always @(posedge i_clk)
	if (i_rst|i_sfence_vma) tlb_vpn_1 <= 0;
	else if (walk2 & i_p_ack) tlb_vpn_1 <= tlb_vpn_0;
	else if ((match_1|match_2) & i_v_stb) tlb_vpn_1 <= tlb_vpn_0;
reg [31:0] tlb_1;
always @(posedge i_clk)
	if (i_rst|i_sfence_vma) tlb_1 <= 0;
	else if (walk2 & i_p_ack) tlb_1 <= tlb_0;
	else if ((match_1|match_2) & i_v_stb) tlb_1 <= tlb_0;
reg [19:0] tlb_vpn_2;
always @(posedge i_clk)
	if (i_rst|i_sfence_vma) tlb_vpn_2 <= 0;
	else if (walk2 & i_p_ack) tlb_vpn_2 <= tlb_vpn_1;
	else if (match_2 & i_v_stb) tlb_vpn_2 <= tlb_vpn_1;
reg [31:0] tlb_2;
always @(posedge i_clk)
	if (i_rst|i_sfence_vma) tlb_2 <= 0;
	else if (walk2 & i_p_ack) tlb_2 <= tlb_1;
	else if (match_2 & i_v_stb) tlb_2 <= tlb_1;

wire start_walk = satp_mode & no_match & i_v_stb;

reg walk1;
always @(posedge i_clk)
	if (i_rst|i_sfence_vma) walk1 <= 0;
	else if (start_walk) walk1 <= 1;
	else if (walk1 & i_p_ack) walk1 <= 0;

reg walk2;
always @(posedge i_clk)
	if (i_rst|i_sfence_vma) walk2 <= 0;
	else if (walk1 & i_p_ack) walk2 <= 1;
	else if (walk2 & i_p_ack) walk2 <= 0;

reg walk1_stb;
always @(posedge i_clk)
	if (i_rst | walk1_stb|i_sfence_vma) walk1_stb <= 0;
	else if (start_walk) walk1_stb <= 1;

reg walk2_stb;
always @(posedge i_clk)
	if (i_rst | walk2_stb|i_sfence_vma) walk2_stb <= 0;
	else if (walk1 & i_p_ack) walk2_stb <= 1;

reg walk3_stb;
always @(posedge i_clk)
	if (i_rst | walk3_stb|i_sfence_vma) walk3_stb <= 0;
	else if (walk2 & i_p_ack) walk3_stb <= 1;

reg [31:0] pte;
always @(posedge i_clk)
	if (i_rst|i_sfence_vma) pte <= 0;
	else if ((walk1|walk2) & i_p_ack) pte <= i_p_dat_r;

endmodule
