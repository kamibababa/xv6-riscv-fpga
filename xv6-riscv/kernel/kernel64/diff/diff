###############################################
../bio.c
###############################################
24a25
> #include "disk.h"
99c100
<     virtio_disk_rw(b, 0);
---
> 	spi_rb(b->blockno,b->data);
111c112
<   virtio_disk_rw(b, 1);
---
>   spi_wb(b->blockno,b->data);

###############################################
../console.c
###############################################
38c38
<     uartputc_sync('\b'); uartputc_sync(' '); uartputc_sync('\b');
---
>     uartputc('\b'); uartputc(' '); uartputc('\b');
40c40
<     uartputc_sync(c);
---
>     uartputc(c);

###############################################
../elf.h
###############################################
11c11
<   uint version;
---
>   uint32 version;
15c15
<   uint flags;
---
>   uint32 flags;
27d26
<   uint32 flags;
32a32
>   uint32 flags;

###############################################
../entry.S
###############################################
1,4c1,7
<         # qemu -kernel loads the kernel at 0x80000000
<         # and causes each hart (i.e. CPU) to jump there.
<         # kernel.ld causes the following code to
<         # be placed at 0x80000000.
---
> 		# qemu -kernel starts at 0x1000. the instructions
>         # there seem to be provided by qemu, as if it
>         # were a ROM. the code at 0x1000 jumps to
>         # 0x8000000, the _start function here,
>         # in machine mode. each CPU starts here.
> .section .data
> .globl stack0
6c9,11
< .global _entry
---
> .globl start
> .section .text
> .globl _entry
8c13
<         # set up a stack for C.
---
> 		# set up a stack for C.
13,14c18
<         li a0, 1024*4
<         csrr a1, mhartid
---
> 		csrr a1, mhartid
16c20
<         mul a0, a0, a1
---
>         slli a0, a1, 12
18c22
<         # jump to start() in start.c
---
> 		# jump to start() in start.c
20,21c24,25
< spin:
<         j spin
---
> junk:
>         j junk

###############################################
../fs.h
###############################################
6c6
< #define BSIZE 1024  // block size
---
> #define BSIZE  512  // block size

###############################################
../kernel.ld
###############################################
11,13c11,13
< 
<   .text : {
<     *(.text .text.*)
---
>   .text :
>   {
>     *(.text)
15d14
<     _trampoline = .;
17,19d15
<     . = ALIGN(0x1000);
<     ASSERT(. - _trampoline == 0x1000, "error: trampoline larger than one page");
<     PROVIDE(etext = .);
22,27c18,19
<   .rodata : {
<     . = ALIGN(16);
<     *(.srodata .srodata.*) /* do not need to distinguish this from .rodata */
<     . = ALIGN(16);
<     *(.rodata .rodata.*)
<   }
---
>   . = ALIGN(0x1000);
>   PROVIDE(etext = .);
28a21,23
>   /*
>    * make sure end is after data and bss.
>    */
30,33c25
<     . = ALIGN(16);
<     *(.sdata .sdata.*) /* do not need to distinguish this from .data */
<     . = ALIGN(16);
<     *(.data .data.*)
---
>     *(.data)
35d26
< 
37,40c28,30
<     . = ALIGN(16);
<     *(.sbss .sbss.*) /* do not need to distinguish this from .bss */
<     . = ALIGN(16);
<     *(.bss .bss.*)
---
>     *(.bss)
>     *(.sbss*)
>      PROVIDE(end = .);
42,43d31
< 
<   PROVIDE(end = .);

###############################################
../kernelvec.S
###############################################
1c1
<         #
---
> 	#
5,7c5
<         # the current stack is a kernel stack.
<         # push all registers, call kerneltrap().
<         # when kerneltrap() returns, restore registers, return.
---
>         # push all registers, call kerneltrap(), restore, return.
8a7
> 
13,14c12,13
<         # make room to save registers.
<         addi sp, sp, -256
---
>         // make room to save registers.
>         addi sp, sp, -128
16,47c15,46
<         # save the registers.
<         sd ra, 0(sp)
<         sd sp, 8(sp)
<         sd gp, 16(sp)
<         sd tp, 24(sp)
<         sd t0, 32(sp)
<         sd t1, 40(sp)
<         sd t2, 48(sp)
<         sd s0, 56(sp)
<         sd s1, 64(sp)
<         sd a0, 72(sp)
<         sd a1, 80(sp)
<         sd a2, 88(sp)
<         sd a3, 96(sp)
<         sd a4, 104(sp)
<         sd a5, 112(sp)
<         sd a6, 120(sp)
<         sd a7, 128(sp)
<         sd s2, 136(sp)
<         sd s3, 144(sp)
<         sd s4, 152(sp)
<         sd s5, 160(sp)
<         sd s6, 168(sp)
<         sd s7, 176(sp)
<         sd s8, 184(sp)
<         sd s9, 192(sp)
<         sd s10, 200(sp)
<         sd s11, 208(sp)
<         sd t3, 216(sp)
<         sd t4, 224(sp)
<         sd t5, 232(sp)
<         sd t6, 240(sp)
---
>         // save the registers.
>         sw ra, 0(sp)
>         sw sp, 4(sp)
>         sw gp, 8(sp)
>         sw tp, 12(sp)
>         sw t0, 16(sp)
>         sw t1, 20(sp)
>         sw t2, 24(sp)
>         sw s0, 28(sp)
>         sw s1, 32(sp)
>         sw a0, 36(sp)
>         sw a1, 40(sp)
>         sw a2, 44(sp)
>         sw a3, 48(sp)
>         sw a4, 52(sp)
>         sw a5, 56(sp)
>         sw a6, 60(sp)
>         sw a7, 64(sp)
>         sw s2, 68(sp)
>         sw s3, 72(sp)
>         sw s4, 76(sp)
>         sw s5, 80(sp)
>         sw s6, 84(sp)
>         sw s7, 88(sp)
>         sw s8, 92(sp)
>         sw s9, 96(sp)
>         sw s10, 100(sp)
>         sw s11, 104(sp)
>         sw t3, 108(sp)
>         sw t4, 112(sp)
>         sw t5, 116(sp)
>         sw t6, 120(sp)
49c48
<         # call the C trap handler in trap.c
---
> 	// call the C trap handler in trap.c
52,83c51,82
<         # restore registers.
<         ld ra, 0(sp)
<         ld sp, 8(sp)
<         ld gp, 16(sp)
<         # not tp (contains hartid), in case we moved CPUs
<         ld t0, 32(sp)
<         ld t1, 40(sp)
<         ld t2, 48(sp)
<         ld s0, 56(sp)
<         ld s1, 64(sp)
<         ld a0, 72(sp)
<         ld a1, 80(sp)
<         ld a2, 88(sp)
<         ld a3, 96(sp)
<         ld a4, 104(sp)
<         ld a5, 112(sp)
<         ld a6, 120(sp)
<         ld a7, 128(sp)
<         ld s2, 136(sp)
<         ld s3, 144(sp)
<         ld s4, 152(sp)
<         ld s5, 160(sp)
<         ld s6, 168(sp)
<         ld s7, 176(sp)
<         ld s8, 184(sp)
<         ld s9, 192(sp)
<         ld s10, 200(sp)
<         ld s11, 208(sp)
<         ld t3, 216(sp)
<         ld t4, 224(sp)
<         ld t5, 232(sp)
<         ld t6, 240(sp)
---
>         // restore registers.
>         lw ra, 0(sp)
>         lw sp, 4(sp)
>         lw gp, 8(sp)
>         // not this, in case we moved CPUs: lw tp, 12(sp)
>         lw t0, 16(sp)
>         lw t1, 20(sp)
>         lw t2, 24(sp)
>         lw s0, 28(sp)
>         lw s1, 32(sp)
>         lw a0, 36(sp)
>         lw a1, 40(sp)
>         lw a2, 44(sp)
>         lw a3, 48(sp)
>         lw a4, 52(sp)
>         lw a5, 56(sp)
>         lw a6, 60(sp)
>         lw a7, 64(sp)
>         lw s2, 68(sp)
>         lw s3, 72(sp)
>         lw s4, 76(sp)
>         lw s5, 80(sp)
>         lw s6, 84(sp)
>         lw s7, 88(sp)
>         lw s8, 92(sp)
>         lw s9, 96(sp)
>         lw s10, 100(sp)
>         lw s11, 104(sp)
>         lw t3, 108(sp)
>         lw t4, 112(sp)
>         lw t5, 116(sp)
>         lw t6, 120(sp)
85c84
<         addi sp, sp, 256
---
>         addi sp, sp, 128
87c86
<         # return to whatever we were doing in the kernel.
---
>         // return to whatever we were doing in the kernel.
97,99c96,98
<         # scratch[0,8,16] : register save area.
<         # scratch[24] : address of CLINT's MTIMECMP register.
<         # scratch[32] : desired interval between interrupts.
---
>         # scratch[0,4,8] : register save area.
>         # scratch[16] : address of CLINT's MTIMECMP register.
>         # scratch[20] : desired interval between interrupts.
102,104c101,104
<         sd a1, 0(a0)
<         sd a2, 8(a0)
<         sd a3, 16(a0)
---
>         sw a1, 0(a0)
>         sw a2, 4(a0)
>         sw a3, 8(a0)
>         sw a4, 12(a0)
108,110c108,111
<         ld a1, 24(a0) # CLINT_MTIMECMP(hart)
<         ld a2, 32(a0) # interval
<         ld a3, 0(a1)
---
>         lw a1, 16(a0) # CLINT_MTIMECMP(hart)
>         lw a2, 20(a0) # interval
>         lw a3, 0(a1)
>         lw a4, 4(a1) # timecmp a4:a3
112,116c113,123
<         sd a3, 0(a1)
< 
<         # arrange for a supervisor software interrupt
<         # after this handler returns.
<         li a1, 2
---
>         sltu a2, a3, a2
>         add a4, a4, a2 # a4:a3 + a2
> 		
> 
>         li a2, -1
>         sw a2, 0(a1)
>         sw a4, 4(a1)
>         sw a3, 0(a1)
>         # raise a supervisor software interrupt.
>         
> 		li a1, 2
118,121c125,129
< 
<         ld a3, 16(a0)
<         ld a2, 8(a0)
<         ld a1, 0(a0)
---
> 		
>         lw a4, 12(a0)
>         lw a3, 8(a0)
>         lw a2, 4(a0)
>         lw a1, 0(a0)

###############################################
../main.c
###############################################
5a6
> #include "disk.h"
30c31,32
<     virtio_disk_init(); // emulated hard disk
---
> 	spi_init();
> //    virtio_disk_init(); // emulated hard disk

###############################################
../memlayout.h
###############################################
28c28
< // core local interruptor (CLINT), which contains the timer.
---
> // local interrupt controller, which contains the timer.
33c33
< // qemu puts platform-level interrupt controller (PLIC) here.
---
> // qemu puts programmable interrupt controller here.
48c48
< #define PHYSTOP (KERNBASE + 128*1024*1024)
---
> #define PHYSTOP (KERNBASE + 512*1024)
52c52
< #define TRAMPOLINE (MAXVA - PGSIZE)
---
> #define TRAMPOLINE (MAXVA - PGSIZE + 1) // HACK FOR 32 BIT
65c65
< //   TRAPFRAME (p->trapframe, used by the trampoline)
---
> //   TRAPFRAME (p->tf, used by the trampoline)

###############################################
../param.h
###############################################
1,6c1,6
< #define NPROC        64  // maximum number of processes
< #define NCPU          8  // maximum number of CPUs
< #define NOFILE       16  // open files per process
< #define NFILE       100  // open files per system
< #define NINODE       50  // maximum number of active i-nodes
< #define NDEV         10  // maximum major device number
---
> #define NPROC         8  // maximum number of processes
> #define NCPU          1  // maximum number of CPUs
> #define NOFILE        8  // open files per process
> #define NFILE         8  // open files per system
> #define NINODE        8  // maximum number of active i-nodes
> #define NDEV          8  // maximum major device number
8,13c8,13
< #define MAXARG       32  // max exec arguments
< #define MAXOPBLOCKS  10  // max # of blocks any FS op writes
< #define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
< #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
< #define FSSIZE       2000  // size of file system in blocks
< #define MAXPATH      128   // maximum file path name
---
> #define MAXARG       16  // max exec arguments
> #define MAXOPBLOCKS  16  // max # of blocks any FS op writes
> #define LOGSIZE      (MAXOPBLOCKS)  // max data blocks in on-disk log
> #define NBUF         (MAXOPBLOCKS)  // size of disk block cache
> #define FSSIZE       80000  // size of file system in blocks
> #define MAXPATH      32   // maximum file path name

###############################################
../plic.c
###############################################
26c26
<   *(uint32*)PLIC_SENABLE(hart) = (1 << UART0_IRQ) | (1 << VIRTIO0_IRQ);
---
>   *(uint32*)PLIC_SENABLE(hart) = (1 << UART0_IRQ);// | (1 << VIRTIO0_IRQ);

###############################################
../proc.c
###############################################
213,215c213,219
<   uvmunmap(pagetable, TRAMPOLINE, 1, 0);
<   uvmunmap(pagetable, TRAPFRAME, 1, 0);
<   uvmfree(pagetable, sz);
---
>   	uvmunmap(pagetable, TRAMPOLINE, 1, 0);
>   	uvmunmap(pagetable, TRAPFRAME, 1, 0);
>   	//free pte2!
> 	int* pte = (int*)(pagetable)+1023;
>   	uint32 pte2 = PTE2PA(*(int*)(pte));
>   	kfree((void*)pte2);
> 	uvmfree(pagetable, sz);
223c227
<   0x97, 0x05, 0x00, 0x00, 0x93, 0x85, 0x35, 0x02,
---
>   0x97, 0x05, 0x00, 0x00, 0x93, 0x85, 0x45, 0x02,
227c231
<   0x74, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00,
---
>   0x74, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00,

###############################################
../riscv.h
###############################################
1,2d0
< #ifndef __ASSEMBLER__
< 
26a25,31
> static inline uint32
> r_sscratch()
> {
>   uint32 x;
>   asm volatile("csrr %0, sscratch" : "=r" (x) );
>   return x;
> }
116c121
< // supervisor exception program counter, holds the
---
> // machine exception program counter, holds the
186,202c191,193
< // Physical Memory Protection
< static inline void
< w_pmpcfg0(uint32 x)
< {
<   asm volatile("csrw pmpcfg0, %0" : : "r" (x));
< }
< 
< static inline void
< w_pmpaddr0(uint32 x)
< {
<   asm volatile("csrw pmpaddr0, %0" : : "r" (x));
< }
< 
< // use riscv's sv39 page table scheme.
< #define SATP_SV39 (8L << 60)
< 
< #define MAKE_SATP(pagetable) (SATP_SV39 | (((uint32)pagetable) >> 12))
---
> // use riscv's sv32 page table scheme.
> #define SATP_SV32 (1L << 31)
> #define MAKE_SATP(pagetable) (SATP_SV32 | (((uint32)pagetable) >> 12)) // 32 bit
219a211,217
> // Supervisor Scratch register, for early trap handler in trampoline.S.
> static inline void 
> w_sscratch(uint32 x)
> {
>   asm volatile("csrw sscratch, %0" : : "r" (x));
> }
> 
271a270
>   w_sie(r_sie() | SIE_SEIE | SIE_STIE | SIE_SSIE);
298c297
< // read and write tp, the thread pointer, which xv6 uses to hold
---
> // read and write tp, the thread pointer, which holds
330,333d328
< typedef uint32 pte_t;
< typedef uint32 *pagetable_t; // 512 PTEs
< 
< #endif // __ASSEMBLER__
345c340
< #define PTE_U (1L << 4) // user can access
---
> #define PTE_U (1L << 4) // 1 -> user can access
354,356c349,351
< // extract the three 9-bit page table indices from a virtual address.
< #define PXMASK          0x1FF // 9 bits
< #define PXSHIFT(level)  (PGSHIFT+(9*(level)))
---
> // extract the TWO (not three, only on 64 bit) 10-bit page table indices from a virtual address.
> #define PXMASK          0x3FF // 10 bits
> #define PXSHIFT(level)  (PGSHIFT+(10*(level)))
363c358,364
< #define MAXVA (1L << (9 + 9 + 9 + 12 - 1))
---
> //#define MAXVA (1L << (9 + 9 + 9 + 12 - 1))
> 
> // HACK FOR 32 bit
> #define MAXVA 0xFFFFFFFF
> 
> typedef uint32 pte_t;
> typedef uint32 *pagetable_t; // 1024 PTEs

###############################################
../start.c
###############################################
13,14c13,14
< // a scratch area per CPU for machine-mode timer interrupts.
< uint32 timer_scratch[NCPU][5];
---
> // scratch area for timer interrupt, one per CPU.
> uint32 mscratch0[NCPU * 32];
24c24
<   unsigned long x = r_mstatus();
---
>   unsigned int x = r_mstatus();
39,44d38
<   w_sie(r_sie() | SIE_SEIE | SIE_STIE | SIE_SSIE);
< 
<   // configure Physical Memory Protection to give supervisor mode
<   // access to all of physical memory.
<   w_pmpaddr0(0x3fffffffffffffull);
<   w_pmpcfg0(0xf);
57,59c51,52
< // arrange to receive timer interrupts.
< // they will arrive in machine mode at
< // at timervec in kernelvec.S,
---
> // set up to receive timer interrupts in machine mode,
> // which arrive at timervec in kernelvec.S,
69,70c62,63
<   int interval = 1000000; // cycles; about 1/10th second in qemu.
<   *(uint32*)CLINT_MTIMECMP(id) = *(uint32*)CLINT_MTIME + interval;
---
>   uint32 interval =  1000000; // cycles; about 1/10th second in qemu.
>   *(uint64*)CLINT_MTIMECMP(id) = *(uint64*)CLINT_MTIME + interval;
73,78c66,71
<   // scratch[0..2] : space for timervec to save registers.
<   // scratch[3] : address of CLINT MTIMECMP register.
<   // scratch[4] : desired interval (in cycles) between timer interrupts.
<   uint32 *scratch = &timer_scratch[id][0];
<   scratch[3] = CLINT_MTIMECMP(id);
<   scratch[4] = interval;
---
>   // scratch[0..3] : space for timervec to save registers.
>   // scratch[4] : address of CLINT MTIMECMP register.
>   // scratch[5] : desired interval (in cycles) between timer interrupts.
>   uint32 *scratch = &mscratch0[32 * id];
>   scratch[4] = CLINT_MTIMECMP(id);
>   scratch[5] = interval;

###############################################
../stat.h
###############################################
10c10
<   uint32 size; // Size of file in bytes
---
>   uint64 size; // Size of file in bytes

###############################################
../swtch.S
###############################################
3c3
< #   void swtch(struct context *old, struct context *new);
---
> #   void swtch(struct context *olw, struct context *new);
5,6c5
< # Save current registers in old. Load from new.	
< 
---
> # Save current registers in olw. Load from new.	
10,23c9,22
<         sd ra, 0(a0)
<         sd sp, 8(a0)
<         sd s0, 16(a0)
<         sd s1, 24(a0)
<         sd s2, 32(a0)
<         sd s3, 40(a0)
<         sd s4, 48(a0)
<         sd s5, 56(a0)
<         sd s6, 64(a0)
<         sd s7, 72(a0)
<         sd s8, 80(a0)
<         sd s9, 88(a0)
<         sd s10, 96(a0)
<         sd s11, 104(a0)
---
>         sw ra, 0(a0)
>         sw sp, 4(a0)
>         sw s0, 8(a0)
>         sw s1, 12(a0)
>         sw s2, 16(a0)
>         sw s3, 20(a0)
>         sw s4, 24(a0)
>         sw s5, 28(a0)
>         sw s6, 32(a0)
>         sw s7, 36(a0)
>         sw s8, 40(a0)
>         sw s9, 44(a0)
>         sw s10, 48(a0)
>         sw s11, 52(a0)
25,38c24,37
<         ld ra, 0(a1)
<         ld sp, 8(a1)
<         ld s0, 16(a1)
<         ld s1, 24(a1)
<         ld s2, 32(a1)
<         ld s3, 40(a1)
<         ld s4, 48(a1)
<         ld s5, 56(a1)
<         ld s6, 64(a1)
<         ld s7, 72(a1)
<         ld s8, 80(a1)
<         ld s9, 88(a1)
<         ld s10, 96(a1)
<         ld s11, 104(a1)
---
>         lw ra, 0(a1)
>         lw sp, 4(a1)
>         lw s0, 8(a1)
>         lw s1, 12(a1)
>         lw s2, 16(a1)
>         lw s3, 20(a1)
>         lw s4, 24(a1)
>         lw s5, 28(a1)
>         lw s6, 32(a1)
>         lw s7, 36(a1)
>         lw s8, 40(a1)
>         lw s9, 44(a1)
>         lw s10, 48(a1)
>         lw s11, 52(a1)

###############################################
../trampoline.S
###############################################
0a1,2
> 	#
>         # code to switch between user and kernel space.
2,10c4,9
<         # low-level code to handle traps from user space into
<         # the kernel, and returns from kernel to user.
<         #
<         # the kernel maps the page holding this code
<         # at the same virtual address (TRAMPOLINE)
<         # in user and kernel space so that it continues
<         # to work when it switches page tables.
<         # kernel.ld causes this code to start at 
<         # a page boundary.
---
>         # this code is mapped at the same virtual address
>         # (TRAMPOLINE) in user and kernel space so that
>         # it continues to work when it switches page tables.
> 	#
> 	# kernel.lw causes this to be aligned
>         # to a page boundary.
13,16c12
< #include "riscv.h"
< #include "memlayout.h"
< 
< .section trampsec
---
> 	.section trampsec
28,36c24,26
< 
<         # save user a0 in sscratch so
<         # a0 can be used to get at TRAPFRAME.
<         csrw sscratch, a0
< 
<         # each process has a separate p->trapframe memory area,
<         # but it's mapped to the same virtual address
<         # (TRAPFRAME) in every process's user page table.
<         li a0, TRAPFRAME
---
>         # sscratch points to where the process's p->tf is
>         # mapped into user space, at TRAPFRAME.
>         #
37a28,31
> 	# swap a0 and sscratch
>         # so that a0 is TRAPFRAME
>         csrrw a0, sscratch, a0
> 
39,68c33,62
<         sd ra, 40(a0)
<         sd sp, 48(a0)
<         sd gp, 56(a0)
<         sd tp, 64(a0)
<         sd t0, 72(a0)
<         sd t1, 80(a0)
<         sd t2, 88(a0)
<         sd s0, 96(a0)
<         sd s1, 104(a0)
<         sd a1, 120(a0)
<         sd a2, 128(a0)
<         sd a3, 136(a0)
<         sd a4, 144(a0)
<         sd a5, 152(a0)
<         sd a6, 160(a0)
<         sd a7, 168(a0)
<         sd s2, 176(a0)
<         sd s3, 184(a0)
<         sd s4, 192(a0)
<         sd s5, 200(a0)
<         sd s6, 208(a0)
<         sd s7, 216(a0)
<         sd s8, 224(a0)
<         sd s9, 232(a0)
<         sd s10, 240(a0)
<         sd s11, 248(a0)
<         sd t3, 256(a0)
<         sd t4, 264(a0)
<         sd t5, 272(a0)
<         sd t6, 280(a0)
---
>         sw ra, 20(a0)
>         sw sp, 24(a0)
>         sw gp, 28(a0)
>         sw tp, 32(a0)
>         sw t0, 36(a0)
>         sw t1, 40(a0)
>         sw t2, 44(a0)
>         sw s0, 48(a0)
>         sw s1, 52(a0)
>         sw a1, 60(a0)
>         sw a2, 64(a0)
>         sw a3, 68(a0)
>         sw a4, 72(a0)
>         sw a5, 76(a0)
>         sw a6, 80(a0)
>         sw a7, 84(a0)
>         sw s2, 88(a0)
>         sw s3, 92(a0)
>         sw s4, 96(a0)
>         sw s5, 100(a0)
>         sw s6, 104(a0)
>         sw s7, 108(a0)
>         sw s8, 112(a0)
>         sw s9, 116(a0)
>         sw s10, 120(a0)
>         sw s11, 124(a0)
>         sw t3, 128(a0)
>         sw t4, 132(a0)
>         sw t5, 136(a0)
>         sw t6, 140(a0)
70c64
< 	# save the user a0 in p->trapframe->a0
---
> 	# save the user a0 in p->tf->a0
72c66
<         sd t0, 112(a0)
---
>         sw t0, 56(a0)
74,75c68,69
<         # initialize kernel stack pointer, from p->trapframe->kernel_sp
<         ld sp, 8(a0)
---
>         # restore kernel stack pointer from p->tf->kernel_sp
>         lw sp, 4(a0)
77,78c71,72
<         # make tp hold the current hartid, from p->trapframe->kernel_hartid
<         ld tp, 32(a0)
---
>         # make tp holw the current hartid, from p->tf->kernel_hartid
>         lw tp, 16(a0)
80,81c74,75
<         # load the address of usertrap(), from p->trapframe->kernel_trap
<         ld t0, 16(a0)
---
>         # load the address of usertrap(), p->tf->kernel_trap
>         lw t0, 8(a0)
83,91c77,78
< 
<         # fetch the kernel page table address, from p->trapframe->kernel_satp.
<         ld t1, 0(a0)
< 
<         # wait for any previous memory operations to complete, so that
<         # they use the user page table.
<         sfence.vma zero, zero
< 
<         # install the kernel page table.
---
>         # restore kernel page table from p->tf->kernel_satp
>         lw t1, 0(a0)
93,94d79
< 
<         # flush now-stale user entries from the TLB.
96a82,84
>         # a0 is no longer valid, since the kernel page
>         # table does not specially map p->tf.
> 
102,103c90
<         # userret(pagetable)
<         # called by usertrapret() in trap.c to
---
>         # userret(TRAPFRAME, pagetable)
105c92,94
<         # a0: user page table, for satp.
---
>         # usertrapret() calls here.
>         # a0: TRAPFRAME, in user page table.
>         # a1: user page table, for satp.
108,109c97
<         sfence.vma zero, zero
<         csrw satp, a0
---
>         csrw satp, a1
112c100,103
<         li a0, TRAPFRAME
---
>         # put the saved user a0 in sscratch, so we
>         # can swap it with our a0 (TRAPFRAME) in the last step.
>         lw t0, 56(a0)
>         csrw sscratch, t0
115,144c106,135
<         ld ra, 40(a0)
<         ld sp, 48(a0)
<         ld gp, 56(a0)
<         ld tp, 64(a0)
<         ld t0, 72(a0)
<         ld t1, 80(a0)
<         ld t2, 88(a0)
<         ld s0, 96(a0)
<         ld s1, 104(a0)
<         ld a1, 120(a0)
<         ld a2, 128(a0)
<         ld a3, 136(a0)
<         ld a4, 144(a0)
<         ld a5, 152(a0)
<         ld a6, 160(a0)
<         ld a7, 168(a0)
<         ld s2, 176(a0)
<         ld s3, 184(a0)
<         ld s4, 192(a0)
<         ld s5, 200(a0)
<         ld s6, 208(a0)
<         ld s7, 216(a0)
<         ld s8, 224(a0)
<         ld s9, 232(a0)
<         ld s10, 240(a0)
<         ld s11, 248(a0)
<         ld t3, 256(a0)
<         ld t4, 264(a0)
<         ld t5, 272(a0)
<         ld t6, 280(a0)
---
>         lw ra, 20(a0)
>         lw sp, 24(a0)
>         lw gp, 28(a0)
>         lw tp, 32(a0)
>         lw t0, 36(a0)
>         lw t1, 40(a0)
>         lw t2, 44(a0)
>         lw s0, 48(a0)
>         lw s1, 52(a0)
>         lw a1, 60(a0)
>         lw a2, 64(a0)
>         lw a3, 68(a0)
>         lw a4, 72(a0)
>         lw a5, 76(a0)
>         lw a6, 80(a0)
>         lw a7, 84(a0)
>         lw s2, 88(a0)
>         lw s3, 92(a0)
>         lw s4, 96(a0)
>         lw s5, 100(a0)
>         lw s6, 104(a0)
>         lw s7, 108(a0)
>         lw s8, 112(a0)
>         lw s9, 116(a0)
>         lw s10, 120(a0)
>         lw s11, 124(a0)
>         lw t3, 128(a0)
>         lw t4, 132(a0)
>         lw t5, 136(a0)
>         lw t6, 140(a0)
146,147c137,138
< 	# restore user a0
<         ld a0, 112(a0)
---
> 	# restore user a0, and save TRAPFRAME in sscratch
>         csrrw a0, sscratch, a0

###############################################
../trap.c
###############################################
129c129
<   ((void (*)(uint32))trampoline_userret)(satp);
---
>   ((void (*)(uint32,uint32))trampoline_userret)(TRAPFRAME,satp);
182c182
<   if((scause & 0x8000000000000000L) &&
---
>   if((scause & 0x80000000L) &&
191,192c191,192
<     } else if(irq == VIRTIO0_IRQ){
<       virtio_disk_intr();
---
> //    } else if(irq == VIRTIO0_IRQ){
> //      virtio_disk_intr();
204c204
<   } else if(scause == 0x8000000000000001L){
---
>   } else if(scause == 0x80000001L){

###############################################
../types.h
###############################################
8c8
< typedef unsigned long uint32;
---
> typedef unsigned long long uint64;

###############################################
../uart.c
###############################################
21,36c21,28
< // see http://byterunner.com/16550.html
< #define RHR 0                 // receive holding register (for input bytes)
< #define THR 0                 // transmit holding register (for output bytes)
< #define IER 1                 // interrupt enable register
< #define IER_RX_ENABLE (1<<0)
< #define IER_TX_ENABLE (1<<1)
< #define FCR 2                 // FIFO control register
< #define FCR_FIFO_ENABLE (1<<0)
< #define FCR_FIFO_CLEAR (3<<1) // clear the content of the two FIFOs
< #define ISR 2                 // interrupt status register
< #define LCR 3                 // line control register
< #define LCR_EIGHT_BITS (3<<0)
< #define LCR_BAUD_LATCH (1<<7) // special mode to set baud rate
< #define LSR 5                 // line status register
< #define LSR_RX_READY (1<<0)   // input is waiting to be read from RHR
< #define LSR_TX_IDLE (1<<5)    // THR can accept another character to send
---
> // http://byterunner.com/16550.html
> #define RHR 0 // receive holding register (for input bytes)
> #define THR 0 // transmit holding register (for output bytes)
> #define IER 1 // interrupt enable register
> #define FCR 2 // FIFO control register
> #define ISR 2 // interrupt status register
> #define LCR 3 // line control register
> #define LSR 5 // line status register
40,51d31
< 
< // the transmit output buffer.
< struct spinlock uart_tx_lock;
< #define UART_TX_BUF_SIZE 32
< char uart_tx_buf[UART_TX_BUF_SIZE];
< uint32 uart_tx_w; // write next to uart_tx_buf[uart_tx_w % UART_TX_BUF_SIZE]
< uint32 uart_tx_r; // read next from uart_tx_buf[uart_tx_r % UART_TX_BUF_SIZE]
< 
< extern volatile int panicked; // from printf.c
< 
< void uartstart();
< 
59c39
<   WriteReg(LCR, LCR_BAUD_LATCH);
---
>   WriteReg(LCR, 0x80);
62c42
<   WriteReg(0, 0x03);
---
>   WriteReg(0, 32000000/115200 & 0xff);
65c45
<   WriteReg(1, 0x00);
---
>   WriteReg(1, 32000000/115200 >> 8);
69c49
<   WriteReg(LCR, LCR_EIGHT_BITS);
---
>   WriteReg(LCR, 0x00);
72,77c52,55
<   WriteReg(FCR, FCR_FIFO_ENABLE | FCR_FIFO_CLEAR);
< 
<   // enable transmit and receive interrupts.
<   WriteReg(IER, IER_TX_ENABLE | IER_RX_ENABLE);
< 
<   initlock(&uart_tx_lock, "uart");
---
>   WriteReg(FCR, 0x07);
>  uartgetc();
>   // enable receive interrupts.
>   WriteReg(IER, 0x01);
80,85c58
< // add a character to the output buffer and tell the
< // UART to start sending if it isn't already.
< // blocks if the output buffer is full.
< // because it may block, it can't be called
< // from interrupts; it's only suitable for use
< // by write().
---
> // write one output character to the UART.
89,120d61
<   acquire(&uart_tx_lock);
< 
<   if(panicked){
<     for(;;)
<       ;
<   }
<   while(uart_tx_w == uart_tx_r + UART_TX_BUF_SIZE){
<     // buffer is full.
<     // wait for uartstart() to open up space in the buffer.
<     sleep(&uart_tx_r, &uart_tx_lock);
<   }
<   uart_tx_buf[uart_tx_w % UART_TX_BUF_SIZE] = c;
<   uart_tx_w += 1;
<   uartstart();
<   release(&uart_tx_lock);
< }
< 
< 
< // alternate version of uartputc() that doesn't 
< // use interrupts, for use by kernel printf() and
< // to echo characters. it spins waiting for the uart's
< // output register to be empty.
< void
< uartputc_sync(int c)
< {
<   push_off();
< 
<   if(panicked){
<     for(;;)
<       ;
<   }
< 
122c63
<   while((ReadReg(LSR) & LSR_TX_IDLE) == 0)
---
>   while((ReadReg(LSR) & (1 << 5)) == 0)
125,156d65
< 
<   pop_off();
< }
< 
< // if the UART is idle, and a character is waiting
< // in the transmit buffer, send it.
< // caller must hold uart_tx_lock.
< // called from both the top- and bottom-half.
< void
< uartstart()
< {
<   while(1){
<     if(uart_tx_w == uart_tx_r){
<       // transmit buffer is empty.
<       return;
<     }
<     
<     if((ReadReg(LSR) & LSR_TX_IDLE) == 0){
<       // the UART transmit holding register is full,
<       // so we cannot give it another byte.
<       // it will interrupt when it's ready for a new byte.
<       return;
<     }
<     
<     int c = uart_tx_buf[uart_tx_r % UART_TX_BUF_SIZE];
<     uart_tx_r += 1;
<     
<     // maybe uartputc() is waiting for space in the buffer.
<     wakeup(&uart_tx_r);
<     
<     WriteReg(THR, c);
<   }
172,174c81
< // handle a uart interrupt, raised because input has
< // arrived, or the uart is ready for more output, or
< // both. called from devintr().
---
> // trap.c calls here when the uart interrupts.
178d84
<   // read and process incoming characters.
185,189d90
< 
<   // send buffered characters.
<   acquire(&uart_tx_lock);
<   uartstart();
<   release(&uart_tx_lock);

###############################################
../vm.c
###############################################
31,32c31,32
<   kvmmap(kpgtbl, VIRTIO0, VIRTIO0, PGSIZE, PTE_R | PTE_W);
< 
---
>   kvmmap(kpgtbl, 0x20000000, 0x20000000, PGSIZE, PTE_R | PTE_W);
>   
91c110
<   for(int level = 2; level > 0; level--) {
---
>   for(int level = 1; level > 0; level--) {

