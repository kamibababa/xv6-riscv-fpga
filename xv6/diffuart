21,28c21,36
< // http://byterunner.com/16550.html
< #define RHR 0 // receive holding register (for input bytes)
< #define THR 0 // transmit holding register (for output bytes)
< #define IER 1 // interrupt enable register
< #define FCR 2 // FIFO control register
< #define ISR 2 // interrupt status register
< #define LCR 3 // line control register
< #define LSR 5 // line status register
---
> // see http://byterunner.com/16550.html
> #define RHR 0                 // receive holding register (for input bytes)
> #define THR 0                 // transmit holding register (for output bytes)
> #define IER 1                 // interrupt enable register
> #define IER_RX_ENABLE (1<<0)
> #define IER_TX_ENABLE (1<<1)
> #define FCR 2                 // FIFO control register
> #define FCR_FIFO_ENABLE (1<<0)
> #define FCR_FIFO_CLEAR (3<<1) // clear the content of the two FIFOs
> #define ISR 2                 // interrupt status register
> #define LCR 3                 // line control register
> #define LCR_EIGHT_BITS (3<<0)
> #define LCR_BAUD_LATCH (1<<7) // special mode to set baud rate
> #define LSR 5                 // line status register
> #define LSR_RX_READY (1<<0)   // input is waiting to be read from RHR
> #define LSR_TX_IDLE (1<<5)    // THR can accept another character to send
31a40,51
> 
> // the transmit output buffer.
> struct spinlock uart_tx_lock;
> #define UART_TX_BUF_SIZE 32
> char uart_tx_buf[UART_TX_BUF_SIZE];
> uint32 uart_tx_w; // write next to uart_tx_buf[uart_tx_w % UART_TX_BUF_SIZE]
> uint32 uart_tx_r; // read next from uart_tx_buf[uart_tx_r % UART_TX_BUF_SIZE]
> 
> extern volatile int panicked; // from printf.c
> 
> void uartstart();
> 
41,42c61,62
<   // LSB for baud rate of 38.4K.
<   WriteReg(0, 24000000/230400);
---
>   // LSB for baud rate of 230.4K.
>   WriteReg(0, 25000000/230400);
49c69
<   WriteReg(LCR, 0x00);
---
>   WriteReg(LCR, LCR_EIGHT_BITS);
52,55c72,77
<   WriteReg(FCR, 0x07);
<  uartgetc();
<   // enable receive interrupts.
<   WriteReg(IER, 0x01);
---
>   WriteReg(FCR, FCR_FIFO_ENABLE | FCR_FIFO_CLEAR);
> 
>   // enable transmit and receive interrupts.
>   WriteReg(IER, IER_TX_ENABLE | IER_RX_ENABLE);
> 
>   initlock(&uart_tx_lock, "uart");
61a89,120
>   acquire(&uart_tx_lock);
> 
>   if(panicked){
>     for(;;)
>       ;
>   }
>   while(uart_tx_w == uart_tx_r + UART_TX_BUF_SIZE){
>     // buffer is full.
>     // wait for uartstart() to open up space in the buffer.
>     sleep(&uart_tx_r, &uart_tx_lock);
>   }
>   uart_tx_buf[uart_tx_w % UART_TX_BUF_SIZE] = c;
>   uart_tx_w += 1;
>   uartstart();
>   release(&uart_tx_lock);
> }
> 
> 
> // alternate version of uartputc() that doesn't 
> // use interrupts, for use by kernel printf() and
> // to echo characters. it spins waiting for the uart's
> // output register to be empty.
> void
> uartputc_sync(int c)
> {
>   push_off();
> 
>   if(panicked){
>     for(;;)
>       ;
>   }
> 
65a125,156
> 
>   pop_off();
> }
> 
> // if the UART is idle, and a character is waiting
> // in the transmit buffer, send it.
> // caller must hold uart_tx_lock.
> // called from both the top- and bottom-half.
> void
> uartstart()
> {
>   while(1){
>     if(uart_tx_w == uart_tx_r){
>       // transmit buffer is empty.
>       return;
>     }
>     
>     if((ReadReg(LSR) & LSR_TX_IDLE) == 0){
>       // the UART transmit holding register is full,
>       // so we cannot give it another byte.
>       // it will interrupt when it's ready for a new byte.
>       return;
>     }
>     
>     int c = uart_tx_buf[uart_tx_r % UART_TX_BUF_SIZE];
>     uart_tx_r += 1;
>     
>     // maybe uartputc() is waiting for space in the buffer.
>     wakeup(&uart_tx_r);
>     
>     WriteReg(THR, c);
>   }
90a185,189
> 
>   // send buffered characters.
>   acquire(&uart_tx_lock);
>   uartstart();
>   release(&uart_tx_lock);
